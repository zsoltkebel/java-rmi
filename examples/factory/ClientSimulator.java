package examples.factory;

import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;

import java.util.Date;
import java.util.Enumeration;
import java.util.Random;
import java.util.Vector;

/**
 * Generates a number of threads to represent clients of a connection 
 * factory manager.

 * <p> The class will produce a number of threads.  This number is
 * specified by the user.  The threads are generated periodically at
 * some time between minDelay and maxDelay.

 * <p> The simulator records the time before initiating the threads
 * and the time at which they have all completed and reports the
 * duration of the experiment.

 * @see ClientThread

 * @author Tim Norman, University of Aberdeen
 * @version 1.0
 */

public class ClientSimulator {
    private String hostname;
    private int port, numClients, minDelay, maxDelay;

    /**
     * This constructor checks the run-time parameters provided by the
     * user and initialises the member variables.

     * <p> The arguments are as follows:
     * <ul>
     * <li> args[0] = The DNS entry for the host on which the server is running.
     * <li> args[1] = The port on the remote host on which the rmiregistry is listening.
     * <li> args[2] = The number of client threads that will be generated by this simulator.
     * <li> args[3] = The minimum delay between generating new client threads.
     * <li> args[4] = The maximum delay between generating new client threads.
     * </ul>
     */
    public ClientSimulator(String args[]) {
		if (args.length < 5) {
			System.err.println( "Usage:\njava cs3515.examples.factory.ClientSimulator <host> <port> <#clients> <minDelay> <maxDelay>" ) ;
			return;
	    }
		hostname = args[0];
		port = Integer.parseInt( args[1] );
		
		numClients = Integer.parseInt( args[2] );
		minDelay = Integer.parseInt( args[3] );
		maxDelay = Integer.parseInt( args[4] );
		
		if (numClients <= 0) {
			System.err.println( "The number of clients must be a positive integer greater than 0." );
			return;
		}
		if (minDelay < 0) {
			System.err.println( "The minimum delay must be a positive integer." );
			return;
		}
		if (maxDelay < minDelay) {
			System.err.println( "The maximum delay must be greater than or equal to the minimum delay." );
			return;
		}
    }

    /**
     * Obtains a reference to the connection factory manager and generates the
     * client threads.

     * <p> This method uses the rmiregistry on the remote host to look up
     * the remote object reference for the factory.

     * <p> The number of threads specified as a run-time parameter are
     * generated with a delay within some range (again, as specified
     * in the run-time parameters) of milliseconds.  The main thread
     * waits until all these client threads have completed (using
     * join()) and the time required to run the experiment is
     * reported.
     */
    public void go() {
		String regURL = "rmi://" + this.hostname + ":" + this.port + "/Factory";
		try {
			Registry registry = LocateRegistry.getRegistry(port);
			ConnectionFactoryInterface man = (ConnectionFactoryInterface) registry.lookup(regURL);

			Random gen = new Random(System.currentTimeMillis());

			ClientThread client;
			Vector<ClientThread> clients = new Vector<ClientThread>( numClients );
			// Record start time of experiment.
			Date start = new Date();
			for (int i = 0; i < numClients; i++) {
				client = new ClientThread(i, man);
				client.start();
				clients.add(client);
				long sleepTime = (long)(minDelay + ((maxDelay - minDelay) * gen.nextFloat()));

				Thread.sleep(sleepTime); // sleep currently executing thread
			}

			// Wait for all the threads to terminate.
			for (Enumeration<ClientThread> e = clients.elements() ; e.hasMoreElements() ;) {
				((ClientThread) e.nextElement()).join();
			}

			// Record end time and report experiment run time.
			Date end = new Date();
			long duration = (end.getTime() - start.getTime());
			System.out.println( "Experiment took " + duration + " milliseconds." );
		}
		catch (InterruptedException e) {
			System.err.println( "Thread interruption." );
			e.printStackTrace( System.err );
		}
		catch (NotBoundException e) {
			System.err.println( regURL + " not bound in rmiregistry." );
			e.printStackTrace( System.err );
		}
		catch (RemoteException e) {
			System.err.println( "Error contacting remote objects on host " + hostname );
			e.printStackTrace( System.err );
		}
    }

    /**
     * Initialise and run the simulatoion
     */
    public static void main(String args[]) {
		ClientSimulator sim = new ClientSimulator( args );
		sim.go();
    }
}
